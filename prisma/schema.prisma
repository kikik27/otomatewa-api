// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  name          String
  email         String         @unique
  password      String
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Device {
  id      String    @id @unique @default(uuid())
  name    String
  status  Boolean   @default(false)
  code    String?   @db.LongText
  history History[]
}

model Template {
  id       String @id @unique @default(uuid())
  name     String
  template String
}

model Group {
  id            String          @id @unique @default(uuid())
  name          String
  target        String
  detailHistory DetailHistory[]
}

model History {
  id            String          @id @unique @default(uuid())
  message       String          @db.LongText()
  deviceId      String
  Device        Device          @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  detailHistory DetailHistory[]
}

model DetailHistory {
  id        String  @id @unique @default(uuid())
  historyId String
  History   History @relation(fields: [historyId], references: [id], onDelete: Cascade)
  groupId   String
  Group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
